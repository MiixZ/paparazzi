/* This file has been generated by gen_flight_plan from /home/gautier/dev/paparazzi/conf/flight_plans/crazyflie_multi_ranger_test.xml */
/* Version v7.0_unstable-15-g5c1c35e859-dirty */
/* Please DO NOT EDIT */

#ifndef FLIGHT_PLAN_H
#define FLIGHT_PLAN_H

#include "std.h"
#include "generated/modules.h"
#include "modules/core/abi.h"
#include "autopilot.h"

extern float fp_throttle;
extern float desired_heading;
extern float nominal_alt;

#include "autopilot_guided.h"
// Useful Combination of the flags fir the autopilot_guided_update
#define GUIDED_FLAG_XY_VEL_BODY GUIDED_FLAG_XY_BODY|GUIDED_FLAG_XY_VEL
#define GUIDED_FLAG_XY_VEL_BODY_YAW_RATE GUIDED_FLAG_XY_BODY|GUIDED_FLAG_XY_VEL|GUIDED_FLAG_YAW_RATE
#define GUIDED_FLAG_XY_OFFSET_Z_VEL GUIDED_FLAG_XY_OFFSET|GUIDED_FLAG_Z_VEL
#define GUIDED_FLAG_XY_OFFSET_YAW_OFFSET GUIDED_FLAG_XY_OFFSET|GUIDED_FLAG_YAW_OFFSET
#ifdef NAV_C
static float obstacle_dist, obstacle_azimuth, obstacle_bearing;
static inline void obstacle_detection_cb(uint8_t sender_id __attribute__((unused)), float _obstacle_dist, float _obstacle_azimuth, float _obstacle_bearing)
{
  if (And(CloseRadAngles(_obstacle_azimuth,0), CloseRadAngles(_obstacle_bearing,0))) {
    obstacle_dist = _obstacle_dist;
    obstacle_azimuth = _obstacle_azimuth;
    obstacle_bearing = _obstacle_bearing;
  }
}
#endif

#define FLIGHT_PLAN_NAME "Rotorcraft Optitrack (ENAC)"
#define NAV_DEFAULT_ALT 147 /* nominal altitude of the flight plan */
#define NAV_UTM_EAST0 377482
#define NAV_UTM_NORTH0 4824577
#define NAV_UTM_ZONE0 31
#define NAV_LAT0 435640917 /* 1e7deg */
#define NAV_LON0 14829201 /* 1e7deg */
#define NAV_ALT0 146000 /* mm above msl */
#define NAV_MSL0 51850 /* mm, EGM96 geoid-height (msl) over ellipsoid */
#define QFU 0.0
#define WP_dummy 0
#define WP_HOME 1
#define WP_STDBY 2
#define WP_TD 3
#define WP_S1 4
#define WP_S2 5
#define WP_S3 6
#define WP_S4 7
#define WP__N1 8
#define WP__N2 9
#define WP__N3 10
#define WP__N4 11
#define WAYPOINTS_UTM { \
 {0.0, 0.0, 147},\
 {0.0, 0.0, 147},\
 {-0.7, -0.8, 147},\
 {0.8, -1.7, 147},\
 {2.0, 3.5, 147},\
 {2.0, -3.5, 147},\
 {-3.0, -3.5, 147},\
 {-3.0, 3.5, 147},\
 {4.5, 5.2, 147},\
 {4.5, -5.2, 147},\
 {-4.5, -5.2, 147},\
 {-4.5, 5.2, 147},\
};
#define WAYPOINTS_ENU { \
 {0.00, -0.00, 1.00}, /* ENU in meters  */ \
 {0.00, -0.00, 1.00}, /* ENU in meters  */ \
 {-0.69, -0.81, 1.00}, /* ENU in meters  */ \
 {0.83, -1.69, 1.00}, /* ENU in meters  */ \
 {1.94, 3.54, 1.00}, /* ENU in meters  */ \
 {2.06, -3.46, 1.00}, /* ENU in meters  */ \
 {-2.94, -3.56, 1.00}, /* ENU in meters  */ \
 {-3.06, 3.45, 1.00}, /* ENU in meters  */ \
 {4.41, 5.28, 1.00}, /* ENU in meters  */ \
 {4.60, -5.12, 1.00}, /* ENU in meters  */ \
 {-4.41, -5.28, 1.00}, /* ENU in meters  */ \
 {-4.60, 5.12, 1.00}, /* ENU in meters  */ \
};
#define WAYPOINTS_LLA { \
 {.lat=435640916, .lon=14829201, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640916, .lon=14829201, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640843, .lon=14829116, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640765, .lon=14829303, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641235, .lon=14829440, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640605, .lon=14829456, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640597, .lon=14828837, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641227, .lon=14828821, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641392, .lon=14829746, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640456, .lon=14829769, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640441, .lon=14828655, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641377, .lon=14828632, .alt=147000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
};
#define WAYPOINTS_LLA_WGS84 { \
 {.lat=435640916, .lon=14829201, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640916, .lon=14829201, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640843, .lon=14829116, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640765, .lon=14829303, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641235, .lon=14829440, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640605, .lon=14829456, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640597, .lon=14828837, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641227, .lon=14828821, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641392, .lon=14829746, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640456, .lon=14829769, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640441, .lon=14828655, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641377, .lon=14828632, .alt=198850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
};
#define WAYPOINTS_GLOBAL { \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
};
#define NB_WAYPOINT 12
#define FP_BLOCKS { \
 "FPInit" , \
 "Holding point" , \
 "Start Engine" , \
 "Take off" , \
 "Standby" , \
 "Stay and avoid" , \
 "Guided avoid" , \
 "Land here" , \
 "Land" , \
 "Land Target" , \
 "Ramp down" , \
 "Kill Engine" , \
 "HOME" , \
}
#define NB_BLOCK 13
#define GROUND_ALT 146.
#define GROUND_ALT_CM 14600
#define SECURITY_HEIGHT 0.3
#define SECURITY_ALT 146.3
#define HOME_MODE_HEIGHT 0.3
#define MAX_DIST_FROM_HOME 20.


#ifndef FBW

#define SECTOR_NET_NB 4
#define SECTOR_NET { 8, 9, 10, 11 }
static inline bool InsideNet(float _x, float _y) {
  uint8_t i, j;
  bool c = false;
  const uint8_t nb_pts = SECTOR_NET_NB;
  const uint8_t wps_id[] = SECTOR_NET;

  for (i = 0, j = nb_pts - 1; i < nb_pts; j = i++) {
    if (((WaypointY(wps_id[i]) > _y) != (WaypointY(wps_id[j]) > _y)) &&
       (_x < (WaypointX(wps_id[j])-WaypointX(wps_id[i])) * (_y-WaypointY(wps_id[i])) / (WaypointY(wps_id[j])-WaypointY(wps_id[i])) + WaypointX(wps_id[i]))) {
      if (c == TRUE) { c = FALSE; } else { c = TRUE; }
    }
  }
  return c;
}

#define SECTOR_SURVEY_NB 4
#define SECTOR_SURVEY { 4, 5, 6, 7 }
static inline bool InsideSurvey(float _x, float _y) {
  uint8_t i, j;
  bool c = false;
  const uint8_t nb_pts = SECTOR_SURVEY_NB;
  const uint8_t wps_id[] = SECTOR_SURVEY;

  for (i = 0, j = nb_pts - 1; i < nb_pts; j = i++) {
    if (((WaypointY(wps_id[i]) > _y) != (WaypointY(wps_id[j]) > _y)) &&
       (_x < (WaypointX(wps_id[j])-WaypointX(wps_id[i])) * (_y-WaypointY(wps_id[i])) / (WaypointY(wps_id[j])-WaypointY(wps_id[i])) + WaypointX(wps_id[i]))) {
      if (c == TRUE) { c = FALSE; } else { c = TRUE; }
    }
  }
  return c;
}


#endif

#ifdef NAV_C

float fp_throttle = 0.1;
float desired_heading = 0.0f;
float nominal_alt = NAV_DEFAULT_ALT;
static abi_event FP_OBSTACLE_DETECTION_ev;
static abi_event FP_RANGE_FORCEFIELD_ev;
static float vel_body_x_FF;
static float vel_body_y_FF;
static float vel_body_z_FF;

static void FP_RANGE_FORCEFIELD_cb(uint8_t sender_id __attribute__((unused)), float _vel_body_x_FF, float _vel_body_y_FF, float _vel_body_z_FF) {
  vel_body_x_FF = _vel_body_x_FF;
  vel_body_y_FF = _vel_body_y_FF;
  vel_body_z_FF = _vel_body_z_FF;
}

static inline void auto_nav_init(void) {
  AbiBindMsgOBSTACLE_DETECTION(ABI_BROADCAST, &FP_OBSTACLE_DETECTION_ev, obstacle_detection_cb);
  AbiBindMsgRANGE_FORCEFIELD(ABI_BROADCAST, &FP_RANGE_FORCEFIELD_ev, FP_RANGE_FORCEFIELD_cb);
}

static inline void auto_nav(void) {
  switch (nav_block) {
    Block(0) // FPInit
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Stage(1)
        obstacle_dist = 10.000000;
        NextStage();
      Stage(2)
        vel_body_x_FF = 0.000000;
        NextStage();
      Stage(3)
        vel_body_y_FF = 0.000000;
        NextStage();
      Stage(4)
        vel_body_z_FF = 0.000000;
        NextStage();
      Label(while_1)
      Stage(5)
        if (! (TRUE)) Goto(endwhile_2) else NextStageAndBreak();
        Stage(6)
          Goto(while_1)
        Label(endwhile_2)
      /* Falls through. */
      default:
      Stage(7)
        NextBlock();
        break;
    }
    break;

    Block(1) // Holding point
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(2) // Start Engine
    switch(nav_stage) {
      Stage(0)
        NavResurrect();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(3) // Take off
    if ((nav_block != 4) && ((stateGetPositionEnu_f())->z>0.600000)) { GotoBlock(4); return; }
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_STDBY);
        NextStage();
      Stage(1)
        NavGotoWaypoint(2);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav.climb_vspeed);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(4) // Standby
    switch(nav_stage) {
      Stage(0)
        NavGotoWaypoint(2);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(2), 0.);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(5) // Stay and avoid
    switch(nav_stage) {
      Stage(0)
        NavAttitude(RadOfDeg(DegOfRad(vel_body_y_FF)));
        NavVerticalAutoThrottleMode(RadOfDeg(-(DegOfRad(vel_body_x_FF))));
        NavVerticalAltitudeMode(WaypointAlt(WP_STDBY), 0.);
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(6) // Guided avoid
    switch(nav_stage) {
      Label(while_3)
      Stage(0)
        if (! (1)) Goto(endwhile_4) else NextStageAndBreak();
        Stage(1)
          autopilot_guided_update(GUIDED_FLAG_XY_VEL_BODY,vel_body_x_FF,vel_body_y_FF,-nominal_alt,desired_heading);
          NextStage();
        Stage(2)
          Goto(while_3)
        Label(endwhile_4)
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(7) // Land here
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_TD);
        NextStage();
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(8) // Land
    switch(nav_stage) {
      Stage(0)
        if (NavApproaching(3,CARROT)) {
          NextStageAndBreakFrom(3);
        } else {
          NavGotoWaypoint(3);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(9) // Land Target
    if ((nav_block != 10) && ((stateGetPositionEnu_f())->z<0.300000)) { GotoBlock(10); return; }
    if ((nav_block != 11) && !(nav_is_in_flight())) { GotoBlock(11); return; }
    switch(nav_stage) {
      Stage(0)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav.descend_vspeed);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(10) // Ramp down
    if ((nav_block != 11) && (guidance_v.delta_t<(0.100000*9600.000000))) { GotoBlock(11); return; }
    switch(nav_stage) {
      Stage(0)
        fp_throttle = (guidance_v.delta_t/9600.000000);
        NextStage();
      Stage(1)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalThrottleMode(9600*((fp_throttle-(0.100000*stage_time))));
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(11) // Kill Engine
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Label(while_5)
      Stage(1)
        if (! (1)) Goto(endwhile_6) else NextStageAndBreak();
        Stage(2)
          Goto(while_5)
        Label(endwhile_6)
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(12) // HOME
    switch(nav_stage) {
      Stage(0)
        nav_home();
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    default: break;
  }
}
#endif // NAV_C

#endif // FLIGHT_PLAN_H
